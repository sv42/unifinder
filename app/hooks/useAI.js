import { useState, useCallback } from 'react';
import { supabase } from '../lib/supabase';

export const useAI = () => {
  const [isLoading, setIsLoading] = useState(false);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –¥–ª—è AI
  const getUniversitiesContext = useCallback(async () => {
    try {
      const { data: universities, error } = await supabase
        .from('universities')
        .select(`
          *,
          programs (*)
        `)
        .order('rating', { ascending: false })
        .limit(50);

      if (error) throw error;
      return universities || [];
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤:', error);
      return [];
    }
  }, []);

  // –ê–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const analyzeUserQuery = useCallback((message, universities) => {
    const lowerMessage = message.toLowerCase();
    const analysis = {
      intent: 'general',
      fields: [],
      budget: null,
      countries: [],
      programs: [],
      level: 'bachelor'
    };

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–º—ñ—Ä—É
    if (lowerMessage.includes('–∫–æ–º–ø\'—é—Ç–µ—Ä') || lowerMessage.includes('–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è') || lowerMessage.includes('it') || lowerMessage.includes('—Ç–µ—Ö–Ω—ñ—á')) {
      analysis.intent = 'computer_science';
      analysis.programs.push('–ö–æ–º–ø\'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏', '–ü—Ä–æ–≥—Ä–∞–º–Ω–∞ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—è', '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó');
    } else if (lowerMessage.includes('–º–µ–¥–∏—Ü–∏–Ω–∞') || lowerMessage.includes('–ª—ñ–∫–∞—Ä') || lowerMessage.includes('–º–µ–¥–∏—á–Ω')) {
      analysis.intent = 'medicine';
      analysis.programs.push('–ú–µ–¥–∏—Ü–∏–Ω–∞', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—è', '–§–∞—Ä–º–∞—Ü—ñ—è');
    } else if (lowerMessage.includes('–±—ñ–∑–Ω–µ—Å') || lowerMessage.includes('mba') || lowerMessage.includes('–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç') || lowerMessage.includes('–µ–∫–æ–Ω–æ–º')) {
      analysis.intent = 'business';
      analysis.programs.push('–ë—ñ–∑–Ω–µ—Å-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è', '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–ï–∫–æ–Ω–æ–º—ñ–∫–∞', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥');
    } else if (lowerMessage.includes('–ø—Ä–∞–≤–æ') || lowerMessage.includes('—é—Ä–∏–¥–∏—á–Ω')) {
      analysis.intent = 'law';
      analysis.programs.push('–ü—Ä–∞–≤–æ', '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü—ñ—è');
    } else if (lowerMessage.includes('–º–∏—Å—Ç–µ—Ü—Ç–≤–æ') || lowerMessage.includes('–¥–∏–∑–∞–π–Ω') || lowerMessage.includes('–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä')) {
      analysis.intent = 'arts';
      analysis.programs.push('–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ', '–î–∏–∑–∞–π–Ω', '–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞');
    }

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
    if (lowerMessage.includes('–¥–æ 5000') || lowerMessage.includes('–¥–æ $5000')) {
      analysis.budget = 5000;
    } else if (lowerMessage.includes('–¥–æ 10000') || lowerMessage.includes('–¥–æ $10000')) {
      analysis.budget = 10000;
    } else if (lowerMessage.includes('–¥–æ 20000') || lowerMessage.includes('–¥–æ $20000')) {
      analysis.budget = 20000;
    } else if (lowerMessage.includes('–¥–æ 30000') || lowerMessage.includes('–¥–æ $30000')) {
      analysis.budget = 30000;
    }

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω
    const countries = ['—É–∫—Ä–∞—ó–Ω–∞', '–ø–æ–ª—å—â–∞', '—á–µ—Ö—ñ—è', '–Ω—ñ–º–µ—á—á–∏–Ω–∞', '—Ñ—Ä–∞–Ω—Ü—ñ—è', '—ñ—Ç–∞–ª—ñ—è', '—ñ—Å–ø–∞–Ω—ñ—è', '–Ω—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏', '—à–≤–µ—Ü—ñ—è', '–∫–∞–Ω–∞–¥–∞', '–∞–≤—Å—Ç—Ä–∞–ª—ñ—è', '—Å—à–∞', '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è'];
    countries.forEach(country => {
      if (lowerMessage.includes(country)) {
        analysis.countries.push(country);
      }
    });

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –æ—Å–≤—ñ—Ç–∏
    if (lowerMessage.includes('–º–∞–≥—ñ—Å—Ç—Ä') || lowerMessage.includes('master')) {
      analysis.level = 'master';
    } else if (lowerMessage.includes('–¥–æ–∫—Ç–æ—Ä') || lowerMessage.includes('phd')) {
      analysis.level = 'phd';
    }

    return analysis;
  }, []);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
  const filterUniversities = useCallback((universities, analysis) => {
    let filtered = universities;

    // –§—ñ–ª—å—Ç—Ä –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö
    if (analysis.countries.length > 0) {
      filtered = filtered.filter(uni => 
        analysis.countries.some(country => 
          uni.country?.toLowerCase().includes(country)
        )
      );
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
    if (analysis.budget) {
      filtered = filtered.filter(uni => 
        uni.tuition_fee_min && uni.tuition_fee_min <= analysis.budget
      );
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–∞—Ö
    if (analysis.programs.length > 0) {
      filtered = filtered.filter(uni => 
        uni.programs?.some(program => 
          analysis.programs.some(targetProgram => 
            program.name?.toLowerCase().includes(targetProgram.toLowerCase())
          )
        )
      );
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    filtered.sort((a, b) => (b.rating || 0) - (a.rating || 0));

    return filtered.slice(0, 5); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø-5
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ OpenAI (—è–∫—â–æ API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π)
  const generateOpenAIResponse = useCallback(async (message, context) => {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey || apiKey === 'your_openai_api_key') {
      return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null —è–∫—â–æ API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î—à —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç. 
              –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–¥–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.
              –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –±—É—Ç–∏ –¥—Ä—É–∂–Ω—ñ–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º.`
            },
            {
              role: 'user',
              content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏: ${JSON.stringify(context)}
              
              –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${message}`
            }
          ],
          max_tokens: 1000,
          temperature: 0.7
        })
      });

      const data = await response.json();
      return data.choices?.[0]?.message?.content || null;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ OpenAI API:', error);
      return null;
    }
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (fallback)
  const generateLocalResponse = useCallback((message, universities, analysis) => {
    const filteredUniversities = filterUniversities(universities, analysis);
    
    let response = '';

    switch (analysis.intent) {
      case 'computer_science':
        response = `üíª –ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä! –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏ - —Ü–µ –¥—É–∂–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞ –≥–∞–ª—É–∑—å.

–û—Å—å –º–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∞—Å:

${filteredUniversities.map((uni, index) => `
**${index + 1}. ${uni.name}**
üìç ${uni.city}, ${uni.country}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${uni.rating || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${uni.tuition_fee_min ? `–≤—ñ–¥ $${uni.tuition_fee_min}` : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üéØ –ü—Ä–æ–≥—Ä–∞–º–∏: ${uni.programs?.map(p => p.name).join(', ') || '–ö–æ–º–ø\'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏'}
`).join('\n')}

**–ß–æ–º—É —Ü—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏?**
‚Ä¢ –í–∏—Å–æ–∫—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö
‚Ä¢ –°—É—á–∞—Å–Ω—ñ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
‚Ä¢ –ó–≤'—è–∑–∫–∏ –∑ IT-–∫–æ–º–ø–∞–Ω—ñ—è–º–∏
‚Ä¢ –°—Ç–∞–∂—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–∞—Ä'—î—Ä–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞

–•–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∞–±–æ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏?`;
        break;

      case 'medicine':
        response = `üè• –ú–µ–¥–∏—Ü–∏–Ω–∞ - —Ü–µ –±–ª–∞–≥–æ—Ä–æ–¥–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è! 

–û—Å—å –Ω–∞–π–∫—Ä–∞—â—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –¥–ª—è –º–µ–¥–∏—á–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏:

${filteredUniversities.map((uni, index) => `
**${index + 1}. ${uni.name}**
üìç ${uni.city}, ${uni.country}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${uni.rating || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${uni.tuition_fee_min ? `–≤—ñ–¥ $${uni.tuition_fee_min}` : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üéØ –ü—Ä–æ–≥—Ä–∞–º–∏: ${uni.programs?.map(p => p.name).join(', ') || '–ú–µ–¥–∏—Ü–∏–Ω–∞'}
`).join('\n')}

**–í–∞–∂–ª–∏–≤—ñ –∞—Å–ø–µ–∫—Ç–∏ –º–µ–¥–∏—á–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏:**
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è: 6-8 —Ä–æ–∫—ñ–≤
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ –∫–ª—ñ–Ω—ñ–∫–∞—Ö
‚Ä¢ –õ—ñ—Ü–µ–Ω–∑—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
‚Ä¢ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó

–ß–∏ —Ü—ñ–∫–∞–≤–∏—Ç—å –≤–∞—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–±–æ –∫—Ä–∞—ó–Ω–∞?`;
        break;

      case 'business':
        response = `üíº –ë—ñ–∑–Ω–µ—Å-–æ—Å–≤—ñ—Ç–∞ - —Ü–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –º–∞–π–±—É—Ç–Ω—î!

–¢–æ–ø —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –¥–ª—è –±—ñ–∑–Ω–µ—Å-–æ—Å–≤—ñ—Ç–∏:

${filteredUniversities.map((uni, index) => `
**${index + 1}. ${uni.name}**
üìç ${uni.city}, ${uni.country}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${uni.rating || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${uni.tuition_fee_min ? `–≤—ñ–¥ $${uni.tuition_fee_min}` : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üéØ –ü—Ä–æ–≥—Ä–∞–º–∏: ${uni.programs?.map(p => p.name).join(', ') || '–ë—ñ–∑–Ω–µ—Å-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è'}
`).join('\n')}

**–ü–µ—Ä–µ–≤–∞–≥–∏ –±—ñ–∑–Ω–µ—Å-–æ—Å–≤—ñ—Ç–∏:**
‚Ä¢ –ú–µ—Ä–µ–∂–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ (networking)
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∫–µ–π—Å–∏
‚Ä¢ –°—Ç–∞–∂—É–≤–∞–Ω–Ω—è –≤ –∫–æ–º–ø–∞–Ω—ñ—è—Ö
‚Ä¢ –í–∏—Å–æ–∫—ñ –∑–∞—Ä–ø–ª–∞—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è

–Ø–∫–∏–π —Ä—ñ–≤–µ–Ω—å –æ—Å–≤—ñ—Ç–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: –±–∞–∫–∞–ª–∞–≤—Ä, –º–∞–≥—ñ—Å—Ç—Ä —á–∏ MBA?`;
        break;

      default:
        response = `ü§î –¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.

${filteredUniversities.length > 0 ? `
–û—Å—å –∫—ñ–ª—å–∫–∞ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏:

${filteredUniversities.map((uni, index) => `
**${index + 1}. ${uni.name}**
üìç ${uni.city}, ${uni.country}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${uni.rating || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${uni.tuition_fee_min ? `–≤—ñ–¥ $${uni.tuition_fee_min}` : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
`).join('\n')}
` : ''}

–©–æ–± –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏:

**üéØ –í–∞—à—ñ —Ü—ñ–ª—ñ:**
‚Ä¢ –Ø–∫–∞ —Å—Ñ–µ—Ä–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?
‚Ä¢ –Ø–∫–∏–π —Ä—ñ–≤–µ–Ω—å –æ—Å–≤—ñ—Ç–∏ (–±–∞–∫–∞–ª–∞–≤—Ä/–º–∞–≥—ñ—Å—Ç—Ä/–¥–æ–∫—Ç–æ—Ä)?
‚Ä¢ –ü–ª–∞–Ω—É—î—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è?

**üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**
‚Ä¢ –Ø–∫–∏–π –≤–∞—à –±—é–¥–∂–µ—Ç?
‚Ä¢ –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç–∏–ø–µ–Ω–¥—ñ—ó?
‚Ä¢ –ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è?

**üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è:**
‚Ä¢ –Ø–∫—ñ –∫—Ä–∞—ó–Ω–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?
‚Ä¢ –í–∞–∂–ª–∏–≤–∏–π –∫–ª—ñ–º–∞—Ç?
‚Ä¢ –ú–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏?

–†–æ–∑–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à–µ –ø—Ä–æ –≤–∞—à—ñ —Ü—ñ–ª—ñ —Ç–∞ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è!`;
    }

    return response;
  }, [filterUniversities]);

  // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  const generateResponse = useCallback(async (message) => {
    setIsLoading(true);
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏
      const universities = await getUniversitiesContext();
      
      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const analysis = analyzeUserQuery(message, universities);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
      const context = {
        universities: universities.slice(0, 10), // –ü–µ—Ä—à—ñ 10 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        analysis,
        userQuery: message
      };

      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ OpenAI
      let response = await generateOpenAIResponse(message, context);
      
      // –Ø–∫—â–æ OpenAI –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É
      if (!response) {
        response = generateLocalResponse(message, universities, analysis);
      }

      return response;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
      return '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.';
    } finally {
      setIsLoading(false);
    }
  }, [getUniversitiesContext, analyzeUserQuery, generateOpenAIResponse, generateLocalResponse]);

  return {
    generateResponse,
    isLoading
  };
}; 