import { useState, useRef, useEffect } from "react";
import { useAI } from "../hooks/useAI";
import Layout from "../components/Layout";

export default function AIAssistantPage() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [conversationStarted, setConversationStarted] = useState(false);
  const messagesEndRef = useRef(null);
  const { generateResponse, isLoading } = useAI();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤
  useEffect(() => {
    const savedMessages = localStorage.getItem('ai-assistant-history');
    if (savedMessages) {
      try {
        const parsedMessages = JSON.parse(savedMessages);
        setMessages(parsedMessages);
        setConversationStarted(parsedMessages.length > 0);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
      }
    }
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('ai-assistant-history', JSON.stringify(messages));
    }
  }, [messages]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ Custom GPT
  const startConversation = () => {
    const welcomeMessage = {
      id: Date.now(),
      type: "assistant",
      content: `üéì –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É!

–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º:
‚Ä¢ –ó–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä—ñ–∑–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
‚Ä¢ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–∏
‚Ä¢ –ü–æ—Ä–∞–¥–∏—Ç–∏ —â–æ–¥–æ –≤—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–º–æ–≥
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∏—â—É –æ—Å–≤—ñ—Ç—É

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, —ñ —è –Ω–∞–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó! 

–ù–∞–ø—Ä–∏–∫–ª–∞–¥:
"–®—É–∫–∞—é —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –Ω–∞—É–∫ –∑ –±—é–¥–∂–µ—Ç–æ–º –¥–æ $20,000"
"–Ø–∫—ñ –Ω–∞–π–∫—Ä–∞—â—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –¥–ª—è MBA –≤ –Ñ–≤—Ä–æ–ø—ñ?"
"–î–æ–ø–æ–º–æ–∂—ñ—Ç—å –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ —Ç–∞ –ê–≤—Å—Ç—Ä–∞–ª—ñ—ó"

–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? ü§î`,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setMessages([welcomeMessage]);
    setConversationStarted(true);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI
  const generateGPTResponse = async (userMessage) => {
    try {
      const response = await generateResponse(userMessage);
      
      const assistantMessage = {
        id: Date.now(),
        type: "assistant",
        content: response,
        timestamp: new Date().toLocaleTimeString()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
      
      const errorMessage = {
        id: Date.now(),
        type: "assistant",
        content: "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
        timestamp: new Date().toLocaleTimeString()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;
    
    const userMessage = {
      id: Date.now(),
      type: "user",
      content: inputMessage,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    
    await generateGPTResponse(inputMessage);
  };

  // –û–±—Ä–æ–±–∫–∞ Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤
  const clearHistory = () => {
    setMessages([]);
    setConversationStarted(false);
    localStorage.removeItem('ai-assistant-history');
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="max-w-4xl mx-auto px-4 py-6">
            <div className="flex items-center justify-between">
              <div className="text-center flex-1">
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                  ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫
                </h1>
                              <p className="text-gray-600">
                –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ –≤—ñ–¥ AI –µ–∫—Å–ø–µ—Ä—Ç–∞
              </p>
              <div className="mt-2 text-xs text-gray-500">
                {import.meta.env.VITE_OPENAI_API_KEY && import.meta.env.VITE_OPENAI_API_KEY !== 'your_openai_api_key' ? (
                  <span className="text-green-600">‚úÖ OpenAI API –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ</span>
                ) : (
                  <span className="text-yellow-600">‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ (–¥–æ–¥–∞–π—Ç–µ OpenAI API –∫–ª—é—á –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)</span>
                )}
              </div>
              </div>
              {conversationStarted && (
                <button
                  onClick={clearHistory}
                  className="px-4 py-2 text-sm bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                  title="–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤"
                >
                  üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏
                </button>
              )}
            </div>
          </div>
        </div>

        <div className="max-w-4xl mx-auto px-4 py-8">
          {!conversationStarted ? (
            <div className="bg-white rounded-xl shadow-sm p-8 text-center">
              <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mb-6">
                <span className="text-3xl">ü§ñ</span>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-4">
                –ì–æ—Ç–æ–≤—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó?
              </h2>
              <p className="text-gray-600 mb-8 max-w-2xl mx-auto">
                –ù–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –Ω–∞–¥–∞—Å—Ç—å –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤. 
                –ü—Ä–æ—Å—Ç–æ –ø–æ—á–Ω—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —Ç–∞ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!
              </p>
              <button
                onClick={startConversation}
                className="px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 font-semibold text-lg"
              >
                üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É –∑ AI
              </button>
            </div>
          ) : (
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              {/* –ß–∞—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
              <div className="h-96 overflow-y-auto p-6 space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-3xl rounded-lg p-4 ${
                        message.type === "user"
                          ? "bg-blue-500 text-white"
                          : "bg-gray-100 text-gray-900"
                      }`}
                    >
                      <div className="whitespace-pre-wrap">{message.content}</div>
                      <div className={`text-xs mt-2 ${
                        message.type === "user" ? "text-blue-100" : "text-gray-500"
                      }`}>
                        {message.timestamp}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 rounded-lg p-4">
                      <div className="flex items-center space-x-2">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                        <span className="text-gray-600 text-sm">AI –¥—É–º–∞—î...</span>
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥—É */}
              <div className="border-t bg-gray-50 p-4">
                <div className="flex space-x-4">
                  <div className="flex-1">
                    <textarea
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                      className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none ${
                        isLoading 
                          ? 'text-gray-500 bg-gray-100 cursor-not-allowed' 
                          : 'text-gray-900 bg-white'
                      }`}
                      rows="2"
                      disabled={isLoading}
                    />
                  </div>
                  <button
                    onClick={sendMessage}
                    disabled={!inputMessage.trim() || isLoading}
                    className={`px-6 py-3 rounded-lg font-medium transition-colors ${
                      inputMessage.trim() && !isLoading
                        ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700'
                        : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                    }`}
                  >
                    üì§
                  </button>
                </div>
                
                <div className="mt-3 text-xs text-gray-500 text-center">
                  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, Shift+Enter –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
} 